{"version":3,"sources":["Actions/index.model.ts","Actions/actions.ts","lib/history.ts","components/Card.tsx","components/CardList.tsx","components/Scroll.tsx","container/Home/Home.tsx","container/Home/index.tsx","container/User/style.ts","container/User/User.tsx","container/User/index.tsx","components/SearchBox.tsx","components/NabBar.tsx","container/App/App.tsx","container/App/index.tsx","serviceWorker.ts","Api/index.ts","sagas/fetchUserSaga.ts","sagas/index.ts","middleware.ts","Reducers/searchRobots.ts","Reducers/requestUsers.ts","Reducers/index.ts","store.ts","index.tsx"],"names":["ActionTypes","fetchUsers","type","FETCH_USER","fetchUserResult","users","FETCH_USER_RESULT","fetchUsersSuccess","FETCH_USER_SUCCESS","fetchUsersPending","FETCH_USER_PENDING","history","require","createBrowserHistory","Card","name","email","id","path","to","className","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflow","height","children","Home","this","searchfield","filteredRobots","filter","robot","toLowerCase","includes","length","Component","mapDispatchToProps","connect","state","searchRobots","searchField","requestUsers","isPending","error","createStyles","userDetailContainer","backgroundColor","root","flexGrow","justifyItems","margin","display","card","maxWidth","media","paper","padding","textAlign","inlineBlock","userAvatar","width","borderRadius","marginTop","textLeft","User","selectedRobot","undefined","params","match","find","u","toString","setState","classes","Container","fixed","Grid","container","spacing","item","xs","sm","cn","Avatar","Typography","variant","Divider","Email","Phone","phone","address","street","suite","city","zipcode","withStyles","styles","console","warn","SearchBox","searchChange","placeholder","onChange","NavBar","onSearchChange","event","target","value","App","val","onFetchUser","exact","component","from","dispatch","text","CHANGE_SEARCH_FIELD","setSearchField","Boolean","window","location","hostname","fetchRobots","fetch","then","response","json","err","fetchUserCall","watchFetchUser","allWatchers","call","put","takeEvery","all","fork","rootSaga","userSaga","logger","createLogger","sagaMiddleware","createSagaMiddleware","routerMiddleware","intialStage","action","selectedId","selectedUser","rootReducer","FETCH_USER_ERROR","SELECTED_USER","store","createStore","combineReducers","applyMiddleware","middleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kNAAYA,E,yDAAAA,K,0CAAAA,E,wBAAAA,E,oCAAAA,E,wCAAAA,E,oCAAAA,E,wCAAAA,E,sCAAAA,E,+BAAAA,M,KCoBL,IAKMC,EAAa,iBAAmB,CACzCC,KAAMF,EAAYG,aAGTC,EAAkB,SAACC,GAAD,MAAqC,CAChEH,KAAMF,EAAYM,kBAClBD,UAGSE,EAAoB,iBAA0B,CACvDL,KAAMF,EAAYQ,qBAGTC,EAAoB,iBAA0B,CACvDP,KAAMF,EAAYU,qB,gDCrCPC,EADCC,EAAQ,IAAWC,uB,gBCwBpBC,EAhBoB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3CC,EAAI,gBAAYD,GACtB,OACE,kBAAC,IAAD,CAAME,GAAID,GACV,yBAAKE,UAAU,uDAEX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,mBACvB,6BACE,4BAAKF,GACL,2BAAIC,OCSGO,EAnBE,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAClB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdF,KAAMS,EAAOG,GAAGZ,KAChBC,MAAOQ,EAAOG,GAAGX,aCLhBa,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,UACvCH,EAAMI,WC4BEC,E,4LAjBPC,KAAKN,MAAM7B,e,+BAEL,IAAD,EAC2BmC,KAAKN,MAA7BO,EADH,EACGA,YAAab,EADhB,EACgBA,OACfc,EAAiBd,GAAUA,EAAOe,QAAO,SAACC,GAC5C,OAAOA,EAAMzB,KAAK0B,cAAcC,SAASL,EAAYI,kBAEzD,OACKH,EAAeK,OAEX,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUnB,OAAQc,KAFtB,2C,GAXGM,aCOXC,EAAsB,CAC1B5C,cAIa6C,eAdS,SAACC,GACvB,MAAO,CACLV,YAAaU,EAAMC,aAAaC,YAChCzB,OAASuB,EAAMG,aAAa1B,OAC5B2B,UAAYJ,EAAMG,aAAaC,UAC/BC,MAAQL,EAAMG,aAAaE,SASSP,EAAzBC,CAA6CX,G,yBC3B/CkB,cAAa,CACxBC,oBAAqB,CACjBC,gBAAiB,UACjBtB,OAAO,KAEXuB,KAAM,CACFC,SAAU,EACVC,aAAc,SACdC,OAAQ,GACRJ,gBAAiB,UACjBK,QAAS,QAEXC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACL9B,OAAQ,KAEV+B,MAAO,CACLC,QAAS,EACTC,UAAW,UAEbC,YAAa,CACTP,QAAQ,gBAEZQ,WAAY,CACRnC,OAAO,IACPoC,MAAO,IACPC,aAAc,IACdX,OAAO,GACPJ,gBAAiB,SAErBgB,UAAW,CACPA,UAAU,IAEdC,SAAS,CACLN,UAAU,U,gEClBdO,E,YACF,WAAY3C,GAAmB,IAAD,8BAC1B,4CAAMA,KACDiB,MAAQ,CACT2B,mBAAeC,GAHO,E,iFAMT,IAAD,EACqBvC,KAAKN,MAAzB8C,EADD,EACRC,MAASD,OAAUvE,EADX,EACWA,MACnBY,EAAO2D,EAAP3D,GACFS,EAAOrB,EAAMyE,MAAK,SAAAC,GAAC,OAAKA,EAAE9D,GAAI+D,aAAe/D,KACnDmB,KAAK6C,SAAS,CAAEP,cAAehD,M,+BAEzB,IACEgD,EAAkBtC,KAAKW,MAAvB2B,cADH,EAEkEtC,KAAKN,MAAMoD,QAArD1B,GAFxB,EAEGF,oBAFH,EAEwBE,MAAMe,EAF9B,EAE8BA,UAAWH,EAFzC,EAEyCA,WAAYI,EAFrD,EAEqDA,SAC1D,OACI,yBAAKpD,UAAWoC,GACXkB,GAEO,kBAACS,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,yBAAKtE,UAAWuE,OAEZ,kBAACC,EAAA,EAAD,CAAQvE,IAAI,aAAaC,IAAG,+BAA0BoD,EAAczD,GAAxC,iBAA2DG,UAAWgD,MAG1G,kBAACiB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,yBAAKtE,UAAWuE,IAAGpB,EAAWC,IAC1B,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAAMpB,EAAc3D,MACxC,kBAACgF,EAAA,EAAD,MACA,kBAACF,EAAA,EAAD,CAAYC,QAAQ,MAAK,kBAACE,EAAA,EAAD,MAAzB,IAAoCtB,EAAc1D,OAClD,kBAAC6E,EAAA,EAAD,CAAYC,QAAQ,MAAK,kBAACG,EAAA,EAAD,MAAUvB,EAAcwB,QAErD,yBAAK9E,UAAWuE,IAAGpB,EAAWC,IAC1B,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAApB,YACA,kBAACC,EAAA,EAAD,MACA,kBAACF,EAAA,EAAD,CAAYC,QAAQ,MAApB,IAA2BpB,EAAcyB,QAAQC,OAAQ,IAAzD,IAA+D1B,EAAcyB,QAAQE,OACrF,kBAACR,EAAA,EAAD,CAAYC,QAAQ,MAAMpB,EAAcyB,QAAQG,KAAM,IAAK5B,EAAcyB,QAAQI,kB,GAvCtG3D,aAkDJ4D,cAAWC,EAAXD,CAAmB/B,GCtDjB3B,eAPS,SAACC,GAEvB,OADA2D,QAAQC,KAAK,eAAgB5D,GACvB,CACF1C,MAAO0C,EAAMG,aAAa1B,UAIQ,KAAzBsB,CAA+B2B,GCEjCmC,EAbG,SAAC,GAAwC,IAArCC,EAAoC,EAApCA,aACpB,OACE,yBAAKzF,UAAU,OACb,2BACEA,UAAU,mCACVlB,KAAK,SACL4G,YAAY,gBACZC,SAAUF,MCkBHG,E,2MAhBXC,eAAiB,SAACC,GACd,EAAKpF,MAAMmF,eAAeC,EAAMC,OAAOC,Q,wEAIvC,OACI,6BACI,kBAAC,IAAD,CAAMjG,GAAG,IAAIC,UAAU,WACnB,wBAAIA,UAAU,MAAd,iBAEJ,kBAAC,EAAD,CAAWyF,aAAczE,KAAK6E,sB,GAZzBrE,aCyCNyE,E,2MAtBbJ,eAAiB,SAACK,GAChB,EAAKxF,MAAMmF,eAAeK,I,mFAJ1BlF,KAAKN,MAAMyF,gB,+BAQX,OACE,yBAAKnG,UAAU,MACb,kBAAC,IAAD,CAAQT,QAASA,GACf,kBAAC,EAAD,CAAQsG,eAAgB7E,KAAK6E,iBAC7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,OAAK,EAACtG,KAAK,oBAAoBuG,UAAWtF,IACjD,kBAAC,IAAD,CAAOqF,OAAK,EAACtG,KAAK,YAAYuG,UAAWhD,KAE3C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAU+C,OAAK,EAACE,KAAK,IAAIvG,GAAG,4B,GApBtByB,aCUDE,eAhBS,SAACC,GACvB,MAAO,CACLV,YAAaU,EAAMC,aAAaC,YAChCzB,OAASuB,EAAMG,aAAa1B,OAC5B2B,UAAYJ,EAAMG,aAAaC,UAC/BC,MAAQL,EAAMG,aAAaE,UAIJ,SAACuE,GAC1B,MAAO,CACLV,eAAiB,SAACW,GAAD,OAAiBD,EbVV,SAACC,GAAD,MAAmC,CAC7D1H,KAAMF,EAAY6H,oBAClBD,QaQ6CE,CAAeF,KAC1DL,YAAc,kBAAMtH,QAIT6C,CAA6CuE,GCvB1CU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrD,MACvB,2D,mDClBOsD,EAAc,WACvB,IACG,OAAQC,MAAM,8CACdC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAE1B,MAAOC,GACL,MAAMA,I,WCDJC,I,WAUAC,I,YAIeC,IAdzB,SAAUF,KAAV,uEAEmB,OAFnB,kBAEyBG,YAAKT,GAF9B,OAGI,OADM9H,EAFV,gBAGUwI,YAAIzI,EAAgBC,IAH9B,OAII,OAJJ,SAIUwI,YAAItI,KAJd,+BAMI,OANJ,oCAMUsI,YAAIpI,KANd,sDAUA,SAAUiI,KAAV,iEACI,OADJ,SACUI,YAAU9I,EAAYG,WAAYsI,IAD5C,uCAIe,SAAUE,KAAV,iEACX,OADW,SACLI,YAAI,CACRC,YAAKN,MAFI,wC,gBCfUO,IAAV,SAAUA,KAAV,iEACb,OADa,SACPF,YAAI,CACRC,YAAKE,MAFM,wC,+BCATC,GAASC,0BACFC,GAAiBC,eAEf,IAACD,GAAgBF,GAAQI,aAAiB5I,I,slBCAzD,IAAM6I,GAA2C,CAC7CvG,YAAc,IAGLD,GAAe,WAAwC,IAAvCD,EAAsC,uDAAhCyG,GAAaC,EAAmB,uCAC/D,OAAOA,EAAOvJ,MACV,KAAKF,EAAY6H,oBACd,OAAO,GAAP,GAAY9E,EAAZ,CAAmBE,YAAcwG,EAAO7B,OAC3C,QACA,OAAO7E,I,8kBCFf,IAAMyG,GAA0C,CAC5ChI,OAAS,GACT2B,WAAW,EACXC,MAAQ,GACRsG,WAAW,GACXC,aAAa,MCVJC,GAAe,CACxB5G,aAAaA,GACbE,aDcwB,WAA6C,IAA5CH,EAA2C,uDAAnCyG,GAAcC,EAAqB,uCACpE,OAAQA,EAAOvJ,MACX,KAAKF,EAAYM,kBACb,OAAO,MAAKyC,EAAZ,CAAmBvB,OAAQiI,EAAOpJ,MAAO8C,WAAW,IACxD,KAAKnD,EAAYQ,mBACb,OAAO,MAAKuC,EAAZ,CAAmBI,WAAW,IAClC,KAAKnD,EAAY6J,iBACb,OAAO,MAAK9G,EAAZ,CAAmBI,WAAW,EAAOC,MAAO,0BAChD,KAAKpD,EAAYU,mBACb,OAAO,MAAKqC,EAAZ,CAAmBI,WAAW,IAClC,KAAKnD,EAAY8J,cACb,OAAO,MAAK/G,EAAZ,CAAmB2G,WAAYD,EAAOxI,KAC1C,QACI,OAAO8B,KE7BJ,cACX,IAAMgH,EAAQC,YAAYC,YACxBL,IAEDM,IAAe,WAAf,cAAmBC,MAEpB,OADAd,GAAee,IAAInB,IACZc,EANI,GCGfA,GAAMpC,SAAS1H,KAEfoK,IAASC,OACL,kBAAC,IAAD,CAAUP,MAAOA,IACb,kBAAC,EAAD,OAEFQ,SAASC,eAAe,STuHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.07edb140.chunk.js","sourcesContent":["export enum ActionTypes {\n    CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD',\n    FETCH_USER = 'FETCH_USER',\n    FETCH_USER_START = 'FETCH_USER_START',\n    FETCH_USER_PENDING = 'FETCH_USER_PENDING',\n    FETCH_USER_ERROR = 'FETCH_USER_ERROR',\n    FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS',\n    FETCH_USER_RESULT ='FETCH_USER_RESULT',\n    SELECTED_USER= 'SELECTED_USER'\n\n}\n\nexport interface SetSearchField {\n    type: ActionTypes.CHANGE_SEARCH_FIELD,\n    text: string\n}\n\nexport interface FetchUsers {\n    type: ActionTypes.FETCH_USER,\n}\n\nexport interface FetchUserResult {\n    type: ActionTypes.FETCH_USER_RESULT,\n    users: Object\n}\n\nexport interface FetchUsersSuccess {\n    type: ActionTypes.FETCH_USER_SUCCESS,\n}\n\nexport interface FetchUsersPending {\n    type: ActionTypes.FETCH_USER_PENDING,\n}\n\nexport interface FetchUsersError {\n    type: ActionTypes.FETCH_USER_ERROR,\n}\n\n\nexport interface SelectedUser {\n    type: ActionTypes.SELECTED_USER,\n    id:number\n}\n\nexport type Actions =\n    SetSearchField\n    | FetchUsers\n    | FetchUserResult\n    | FetchUsersSuccess\n    | FetchUsersPending\n    | FetchUsersError\n    | SelectedUser;","// import { \n//     CHANGE_SEARCH_FIELD,\n//     FETCH_USER_START,\n//     FETCH_USER_PENDING,\n//     FETCH_USER_ERROR,\n//     FETCH_USER_SUCCESS\n//          } from '../constants';\n\nimport {\n    ActionTypes,\n    SetSearchField,\n    FetchUsers,\n    FetchUserResult,\n    FetchUsersSuccess,\n    FetchUsersPending,\n    FetchUsersError,\n    SelectedUser\n} from './index.model'\n\n\nexport const setSearchField = (text: string): SetSearchField => ({\n    type: ActionTypes.CHANGE_SEARCH_FIELD,\n    text\n})\n\nexport const fetchUsers = (): FetchUsers => ({\n    type: ActionTypes.FETCH_USER,\n})\n\nexport const fetchUserResult = (users: Object): FetchUserResult => ({\n    type: ActionTypes.FETCH_USER_RESULT,\n    users\n})\n\nexport const fetchUsersSuccess = (): FetchUsersSuccess => ({\n    type: ActionTypes.FETCH_USER_SUCCESS,\n})\n\nexport const fetchUsersPending = (): FetchUsersPending => ({\n    type: ActionTypes.FETCH_USER_PENDING,\n})\n\nexport const fetchUsersError = (): FetchUsersError => ({\n    type: ActionTypes.FETCH_USER_ERROR,\n})\n\nexport const selectUser = (id:number): SelectedUser => ({\n    type: ActionTypes.SELECTED_USER,\n    id\n})\n\n\n// export const fetchUsers = async (dispatch:any) => {\n//     dispatch({type: FETCH_USER_START})\n\n//     try {\n//         dispatch({type: FETCH_USER_PENDING})\n//         const user = await fetchRobots();\n//         dispatch({type: FETCH_USER_SUCCESS, payload: user})\n//         console.log('users', user)\n//     } catch(err) {\n//         dispatch({type: FETCH_USER_ERROR})\n//     }\n\n// }\n\n","// tslint:disable-next-line: prefer-const\nconst history = require('history').createBrowserHistory()\nexport default history\n","import React from 'react';\nimport { Link } from 'react-router-dom'\n\ninterface CardProps {\n  name: string,\n  email: string,\n  id: number\n}\n\nconst Card: React.SFC<CardProps> = ({ name, email, id }) => {\n  const path = `/user/${id}`\n  return (\n    <Link to={path}>\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      {/* <Avatar alt=\"Remy Sharp\" src={`https://robohash.org/${id}?size=200x200`} /> */}\n        <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n    </Link>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport { Robot } from '../Interfaces'\n\ninterface CardListProps {\n  robots: Array<Robot>\n}\n\nconst CardList = ({ robots }:CardListProps) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\ntype Props = {\n  children?: JSX.Element\n}\n\nconst Scroll = (props:Props) => {\n  return (\n    <div style={{ overflow: 'scroll', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../../components/CardList';\nimport Scroll from '../../components/Scroll';\nimport { Robot } from '../../Interfaces';\n\ninterface IAppProps {\n    searchfield: string,\n    robots: Robot[],\n    isPending: boolean,\n    error: string,\n    fetchUsers: () => void\n}\n\ninterface IAppState {\n\n}\n\nclass Home extends Component<IAppProps, IAppState> {\n    componentDidMount() {\n        this.props.fetchUsers();\n    }\n    render() {\n        const { searchfield, robots } = this.props;\n        const filteredRobots = robots && robots.filter((robot: Robot) => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        return (\n            !filteredRobots.length ?\n                <h1>Loading</h1> :\n                (<Scroll>\n                    <CardList robots={filteredRobots} />\n                </Scroll>)\n        )\n    }\n}\n\nexport default Home;","import { connect } from 'react-redux';\nimport { Robot } from '../../Interfaces';\nimport Home from './Home'\nimport { RootState } from '../../Reducers';\nimport { fetchUsers } from '../../Actions/actions';\n\n\ninterface IStateToProps {\n    searchfield: string,\n    robots : Robot[],\n    isPending : boolean,\n    error : string,\n  }\n\n  \n  const mapStateToProps = (state:RootState):IStateToProps => {\n    return {\n      searchfield: state.searchRobots.searchField,\n      robots : state.requestUsers.robots,\n      isPending : state.requestUsers.isPending,\n      error : state.requestUsers.error,\n    }\n  }\n\n  const mapDispatchToProps =  {\n    fetchUsers\n  }\n\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(Home);","import { createStyles } from \"@material-ui/styles\";\n\nexport default createStyles({\n    userDetailContainer: {\n        backgroundColor: \"#0ccac4\",\n        height:800\n    },\n    root: {\n        flexGrow: 1,\n        justifyItems: 'center',\n        margin: 20,\n        backgroundColor: \"#0ccac4\",\n        display: 'felx'\n      },\n      card: {\n        maxWidth: 345,\n      },\n      media: {\n        height: 140,\n      },\n      paper: {\n        padding: 5,\n        textAlign: 'center',\n      },\n      inlineBlock: {\n          display:'inline-block'\n      },\n      userAvatar: {\n          height:200,\n          width: 200,\n          borderRadius: 100,\n          margin:20,\n          backgroundColor: 'white'\n      },\n      marginTop: {\n          marginTop:50\n      },\n      textLeft:{\n          textAlign:'left'\n      }\n});","import React, { Component } from 'react';\nimport cn from 'classnames'\nimport { match } from 'react-router';\nimport { Robot } from '../../Interfaces';\nimport styles from './style'\nimport { withStyles, WithStyles, Avatar, Icon, Grid, Container, Typography, Divider } from '@material-ui/core'\nimport { Email, Phone } from '@material-ui/icons';\n\n\n\ninterface IAppProps extends WithStyles<typeof styles> {\n    match: match<{ id: string }>\n    users: Robot[],\n    fetchUsers: () => void\n}\n\ninterface IAppState {\n    selectedRobot: Robot | undefined\n}\n\nclass User extends Component<IAppProps, IAppState> {\n    constructor(props: IAppProps) {\n        super(props);\n        this.state = {\n            selectedRobot: undefined\n        }\n    }\n    componentDidMount() {\n        const { match: { params }, users } = this.props;\n        const { id } = params;\n        const user = users.find(u => (u.id).toString() === id);\n        this.setState({ selectedRobot: user })\n    }\n    render() {\n        const { selectedRobot } = this.state\n        const { userDetailContainer, root, marginTop, userAvatar, textLeft } = this.props.classes\n        return (\n            <div className={root}>\n                {selectedRobot\n                    && (\n                        <Container fixed>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12} sm={6}>\n                                    <div className={cn()}>\n                                        {/* <img alt='robots' src={`https://robohash.org/${selectedRobot.id}?size=200x200`} /> */}\n                                        <Avatar alt=\"Remy Sharp\" src={`https://robohash.org/${selectedRobot.id}?size=200x200`} className={userAvatar} />\n                                    </div>\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <div className={cn(marginTop, textLeft)}>\n                                        <Typography variant=\"h3\">{selectedRobot.name}</Typography>\n                                        <Divider />\n                                        <Typography variant=\"h6\"><Email /> {selectedRobot.email}</Typography>\n                                        <Typography variant=\"h6\"><Phone />{selectedRobot.phone}</Typography>\n                                    </div>\n                                    <div className={cn(marginTop, textLeft)}>\n                                        <Typography variant=\"h5\">Address:</Typography>\n                                        <Divider />\n                                        <Typography variant=\"h6\"> {selectedRobot.address.street}{','} {selectedRobot.address.suite}</Typography>\n                                        <Typography variant=\"h6\">{selectedRobot.address.city}{'-'}{selectedRobot.address.zipcode}</Typography>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </Container>\n                    )}\n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(User);","import { connect } from 'react-redux';\nimport { Robot } from '../../Interfaces';\nimport User from './User'\nimport { RootState } from '../../Reducers';\n\n\ninterface IStateToProps {\n   users:Robot[]\n  }\n  const mapStateToProps = (state:RootState):IStateToProps => {\n    console.warn('users states', state);\n    return{\n        users: state.requestUsers.robots\n    } \n  }\n \n  export default connect(mapStateToProps, null)(User);","import React from 'react';\ninterface ISearchBoxProps {\n  searchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\n}\n\nconst SearchBox = ({  searchChange }: ISearchBoxProps) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport SearchBox from './SearchBox';\n\ninterface IAppProps {\n    onSearchChange: (val: string) => void,\n}\n\ninterface IAppState {\n\n}\n\nclass NavBar extends Component<IAppProps, IAppState> {\n\n    onSearchChange = (event: any) => {\n        this.props.onSearchChange(event.target.value)\n    }\n\n    render() {\n        return (\n            <nav>\n                <Link to='/' className='no-link'>\n                    <h1 className='f1'>Find Friends</h1>\n                </Link>\n                <SearchBox searchChange={this.onSearchChange}/>\n            </nav>\n        )\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport { Router, Redirect } from \"react-router\";\n// import { ConnectedRouter } from 'connected-react-router'\n\nimport history from '../../lib/history';\nimport './App.css';\nimport { Robot } from '../../Interfaces';\nimport Home from '../Home'\nimport User from '../User/index';\nimport NavBar from '../../components/NabBar';\n\ninterface IAppProps {\n  onFetchUser: () => void,\n  onSearchChange: (val: string) => void,\n  searchfield: string,\n  robots: Robot[],\n  isPending: boolean,\n  error: string\n}\n\ninterface IAppState {\n\n}\n\nclass App extends Component<IAppProps, IAppState> {\n\n  componentDidMount() {\n    this.props.onFetchUser()\n  }\n\n  onSearchChange = (val: string) => {\n    this.props.onSearchChange(val)\n  }\n\n  render() {\n    return (\n      <div className='tc'>\n        <Router history={history}>\n          <NavBar onSearchChange={this.onSearchChange} />\n          <Switch>\n            <Route exact path=\"/friendTypescript\" component={Home} />\n            <Route exact path=\"/user/:id\" component={User} />\n          </Switch>\n          <Switch>\n            <Redirect exact from=\"/\" to=\"friendTypescript\" />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;","import { connect } from 'react-redux';\nimport { setSearchField, fetchUsers } from '../../Actions/actions';\nimport { Robot } from '../../Interfaces';\nimport App from './App'\nimport { RootState } from '../../Reducers';\n\n\ninterface IStateToProps {\n    searchfield: string,\n    robots : Robot[],\n    isPending : boolean,\n    error : string,\n  }\n\ninterface IDisptchToProps {\n    onSearchChange : (text:string) => void,\n    onFetchUser : () => void,\n  }\n  \n  const mapStateToProps = (state:RootState):IStateToProps => {\n    return {\n      searchfield: state.searchRobots.searchField,\n      robots : state.requestUsers.robots,\n      isPending : state.requestUsers.isPending,\n      error : state.requestUsers.error,\n    }\n  }\n  \n  const mapDispatchToProps = (dispatch:any):IDisptchToProps  => {\n    return {\n      onSearchChange : (text:string) => dispatch(setSearchField(text)),\n      onFetchUser : () => fetchUsers(),\n    }\n  }\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const fetchRobots = () => {\n    try{\n       return  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n\n    } catch (err) {\n        throw err;\n    }\n}","import { all, call, fork, takeEvery, put } from 'redux-saga/effects'\nimport { ActionTypes } from '../Actions/index.model'\nimport { fetchRobots } from '../Api'\nimport { fetchUserResult, fetchUsersSuccess, fetchUsersPending} from '../Actions/actions'\n\nfunction* fetchUserCall() {\ntry {\n    const users =  yield call(fetchRobots)\n    yield put(fetchUserResult(users))\n    yield put(fetchUsersSuccess())\n} catch(err) {\n    yield put(fetchUsersPending())\n}\n}\n\nfunction* watchFetchUser() {\n    yield takeEvery(ActionTypes.FETCH_USER, fetchUserCall)\n}\n\nexport default function* allWatchers() {\n    yield all([\n      fork(watchFetchUser),\n      \n    ])\n  }","import { all, fork } from 'redux-saga/effects'\nimport userSaga from './fetchUserSaga'\n\n\nexport default function* rootSaga() {\n  yield all([\n    fork(userSaga),\n  ])\n}\n","import createSagaMiddleware from 'redux-saga'\nimport { createLogger } from 'redux-logger'\nimport {  routerMiddleware } from 'connected-react-router'\nimport history from './lib/history'\nconst logger = createLogger();\nexport const sagaMiddleware = createSagaMiddleware()\n\nexport default [sagaMiddleware, logger, routerMiddleware(history) ]","\nimport { Actions, ActionTypes } from '../Actions/index.model';\n\n\nexport interface ISearchRobotsInitState {\n    searchField:string;\n  }\nconst intialStage:ISearchRobotsInitState | {}  = {\n    searchField : '',\n}\n\nexport const searchRobots = (state=intialStage, action:Actions) => {\n    switch(action.type) {\n        case ActionTypes.CHANGE_SEARCH_FIELD:\n           return { ...state, searchField : action.text } \n        default:\n        return state;   \n    }\n}\n","\nimport { Actions, ActionTypes } from '../Actions/index.model';\nimport { Robot } from '../Interfaces';\n\n\n\nexport interface IRequestUserIntiState {\n    robots : Robot[] ,\n    isPending: boolean,\n    error : string,\n    selectedId: string,\n    selectedUser: Robot | null,\n  }\n\nconst intialStage: IRequestUserIntiState | {} = {\n    robots : [],\n    isPending: false,\n    error : '',\n    selectedId:'',\n    selectedUser:null\n}\n\n\n\n\nexport const requestUsers = (state = intialStage , action: Actions ) => {\n    switch (action.type) {\n        case ActionTypes.FETCH_USER_RESULT:\n            return { ...state, robots: action.users, isPending: false }\n        case ActionTypes.FETCH_USER_SUCCESS:\n            return { ...state, isPending: false }\n        case ActionTypes.FETCH_USER_ERROR:\n            return { ...state, isPending: false, error: 'Failed To fetch users' }\n        case ActionTypes.FETCH_USER_PENDING:\n            return { ...state, isPending: true };\n        case ActionTypes.SELECTED_USER:\n            return { ...state, selectedId: action.id };\n        default:\n            return state;\n    }\n}","import { searchRobots, ISearchRobotsInitState } from './searchRobots';\nimport { requestUsers, IRequestUserIntiState } from './requestUsers'\nimport { combineReducers } from 'redux';\n\nexport interface RootState {\n    searchRobots: ISearchRobotsInitState\n    requestUsers: IRequestUserIntiState\n  }\n\nexport const rootReducer  = {\n    searchRobots:searchRobots,\n    requestUsers:requestUsers,\n}\n\nexport default () => combineReducers(searchRobots)","import { createStore, combineReducers, applyMiddleware } from 'redux'\n// import { composeWithDevTools } from 'redux-devtools-extension'\nimport rootSaga from './sagas/index'\nimport { sagaMiddleware } from './middleware'\n\nimport {rootReducer} from './Reducers'\nimport middleware  from './middleware'\n\n\nexport default (() => {\n    const store = createStore(combineReducers(\n      rootReducer,\n      ),\n     applyMiddleware(...middleware))\n    sagaMiddleware.run(rootSaga)\n    return store\n  })()","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport './index.css';\nimport App from './container/App/index';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport store from './store'\nimport { fetchUsers } from './Actions/actions';\n\n\nstore.dispatch(fetchUsers())\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}