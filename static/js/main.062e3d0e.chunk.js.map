{"version":3,"sources":["Api/index.ts","actions.ts","constants.ts","components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","container/App/App.tsx","container/App/index.tsx","serviceWorker.ts","Reducers/searchRobots.ts","Reducers/requestUsers.ts","Reducers/index.ts","index.tsx"],"names":["fetchRobots","fetch","then","response","json","err","fetchUsers","dispatch","a","type","user","payload","console","log","Card","name","email","id","className","alt","src","CardList","robots","map","i","key","SearchBox","searchChange","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","target","value","this","onFetchUser","searchfield","filteredRobots","filter","robot","toLowerCase","includes","length","Component","connect","state","searchRobots","searchField","requestUsers","isPending","error","text","setSearchField","Boolean","window","location","hostname","match","intialStage","rootReducer","action","rootReducers","combineReducers","logger","createLogger","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.062e3d0e.chunk.js","sourcesContent":["export const fetchRobots = () => {\n    try{\n       return  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n\n    } catch (err) {\n        throw err;\n    }\n}","import { \n    CHANGE_SEARCH_FIELD,\n    FETCH_USER_START,\n    FETCH_USER_PENDING,\n    FETCH_USER_ERROR,\n    FETCH_USER_SUCCESS\n         } from './constants';\nimport { fetchRobots } from './Api'\n\nexport const  setSearchField = (text:string) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const fetchUsers = async (dispatch:any) => {\n    dispatch({type: FETCH_USER_START})\n\n    try {\n        dispatch({type: FETCH_USER_PENDING})\n        const user = await fetchRobots();\n        dispatch({type: FETCH_USER_SUCCESS, payload: user})\n        console.log('users', user)\n    } catch(err) {\n        dispatch({type: FETCH_USER_ERROR})\n    }\n   \n}\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const FETCH_USER_START = 'FETCH_USER_START';\n\nexport const FETCH_USER_PENDING = 'FETCH_USER_PENDING';\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nexport const FETCH_USER_ERROR = 'FETCH_USER_ERROR';\n\n","import React from 'react';\n\ninterface CardProps  {\n  name: string,\n  email: string,\n  id: number\n}\n\nconst Card: React.SFC<CardProps> = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport { Robot } from '../Interfaces'\n\ninterface CardListProps {\n  robots: Array<Robot>\n}\n\nconst CardList = ({ robots }:CardListProps) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\ninterface ISearchBoxProps {\n  searchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\n}\n\nconst SearchBox = ({  searchChange }: ISearchBoxProps) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\ntype Props = {\n  children?: JSX.Element\n}\n\nconst Scroll = (props:Props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../../components/CardList';\nimport SearchBox from '../../components/SearchBox';\nimport Scroll from '../../components/Scroll';\nimport './App.css';\nimport { Robot } from '../../Interfaces';\n\ninterface IAppProps {\n  onFetchUser:() => void,\n  onSearchChange:(val:string) => void,\n  searchfield:string,\n  robots: Robot[],\n  isPending:boolean,\n  error:string\n}\n\ninterface IAppState {\n\n}\n\nclass App extends Component<IAppProps, IAppState> {\n\n  componentDidMount() {\n    this.props.onFetchUser()\n  }\n\n  onSearchChange = (event:any) => {\n    this.props.onSearchChange(event.target.value)\n  }\n\n  render() {\n    const { searchfield, robots } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>Find Friends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;","import { connect } from 'react-redux';\nimport { setSearchField, fetchUsers } from '../../actions';\nimport { Robot } from '../../Interfaces';\nimport App from './App'\n\n\ninterface IStateToProps {\n    searchfield: string,\n    robots : Robot[],\n    isPending : boolean,\n    error : string,\n  }\n\ninterface IDisptchToProps {\n    onSearchChange : (text:string) => void,\n    onFetchUser : () => void,\n  }\n  \n  const mapStateToProps = (state:any):IStateToProps => {\n    return {\n      searchfield: state.searchRobots.searchField,\n      robots : state.requestUsers.robots,\n      isPending : state.requestUsers.isPending,\n      error : state.requestUsers.error,\n    }\n  }\n  \n  const mapDispatchToProps = (dispatch:any):IDisptchToProps  => {\n    return {\n      onSearchChange : (text:string) => dispatch(setSearchField(text)),\n      onFetchUser : () => fetchUsers(dispatch),\n    }\n  }\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport { CHANGE_SEARCH_FIELD } from '../constants';\n\nconst intialStage = {\n    searchField : '',\n}\n\nexport const searchRobots = (state=intialStage, action:any = {}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n           return { ...state, searchField : action.payload } \n        default:\n        return state;   \n    }\n}\n","\nimport { FETCH_USER_SUCCESS, FETCH_USER_ERROR , FETCH_USER_PENDING } from '../constants';\n\nconst intialStage = {\n    robots : [],\n    isPending: false,\n    error : '',\n}\n\n\n\n\nexport const requestUsers = (state = intialStage, action:any = {}) => {\n    switch (action.type) {\n        case FETCH_USER_SUCCESS:\n            return { ...state, robots: action.payload, isPending: false }\n        case FETCH_USER_ERROR:\n            return { ...state, isPending: false, error: 'Failed To fetch users' }\n        case FETCH_USER_PENDING:\n            return { ...state, isPending: true }\n        default:\n            return state;\n    }\n}","import { searchRobots } from './searchRobots';\nimport { requestUsers } from './requestUsers'\nexport const rootReducer = {\n    searchRobots:searchRobots,\n    requestUsers:requestUsers,\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport './index.css';\nimport App from './container/App/index';\nimport * as serviceWorker from './serviceWorker';\nimport { rootReducer } from './Reducers/index'\nimport 'tachyons';\nconst rootReducers = combineReducers(rootReducer)\nconst logger = createLogger();\nconst store = createStore(rootReducers, applyMiddleware(logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}