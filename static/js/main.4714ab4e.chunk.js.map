{"version":3,"sources":["Actions/index.model.ts","Actions/actions.ts","components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","container/App/App.tsx","container/App/index.tsx","serviceWorker.ts","Api/index.ts","sagas/fetchUserSaga.ts","sagas/index.ts","middleware.ts","Reducers/searchRobots.ts","Reducers/requestUsers.ts","Reducers/index.ts","store.ts","index.tsx"],"names":["ActionTypes","fetchUsers","type","FETCH_USER","fetchUserResult","users","FETCH_USER_RESULT","fetchUsersSuccess","FETCH_USER_SUCCESS","fetchUsersPending","FETCH_USER_PENDING","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","target","value","this","onFetchUser","searchfield","filteredRobots","filter","robot","toLowerCase","includes","length","Component","connect","state","console","warn","searchRobots","searchField","requestUsers","isPending","error","dispatch","text","CHANGE_SEARCH_FIELD","setSearchField","Boolean","window","location","hostname","match","fetchRobots","fetch","then","response","json","err","fetchUserCall","watchFetchUser","allWatchers","call","put","takeEvery","all","fork","rootSaga","userSaga","logger","createLogger","sagaMiddleware","createSagaMiddleware","intialStage","action","rootReducer","FETCH_USER_ERROR","store","createStore","combineReducers","applyMiddleware","middleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4714ab4e.chunk.js","sourcesContent":["export enum ActionTypes {\n    CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD',\n    FETCH_USER = 'FETCH_USER',\n    FETCH_USER_START = 'FETCH_USER_START',\n    FETCH_USER_PENDING = 'FETCH_USER_PENDING',\n    FETCH_USER_ERROR = 'FETCH_USER_ERROR',\n    FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS',\n    FETCH_USER_RESULT ='FETCH_USER_RESULT'\n\n}\n\nexport interface SetSearchField {\n    type: ActionTypes.CHANGE_SEARCH_FIELD,\n    text: string\n}\n\nexport interface FetchUsers {\n    type: ActionTypes.FETCH_USER,\n}\n\nexport interface FetchUserResult {\n    type: ActionTypes.FETCH_USER_RESULT,\n    users: Object\n}\n\nexport interface FetchUsersSuccess {\n    type: ActionTypes.FETCH_USER_SUCCESS,\n}\n\nexport interface FetchUsersPending {\n    type: ActionTypes.FETCH_USER_PENDING,\n}\n\nexport interface FetchUsersError {\n    type: ActionTypes.FETCH_USER_ERROR,\n}\n\nexport type Actions =\n    SetSearchField\n    | FetchUsers\n    | FetchUserResult\n    | FetchUsersSuccess\n    | FetchUsersPending\n    | FetchUsersError;","// import { \n//     CHANGE_SEARCH_FIELD,\n//     FETCH_USER_START,\n//     FETCH_USER_PENDING,\n//     FETCH_USER_ERROR,\n//     FETCH_USER_SUCCESS\n//          } from '../constants';\n\nimport {\n    ActionTypes,\n    SetSearchField,\n    FetchUsers,\n    FetchUserResult,\n    FetchUsersSuccess,\n    FetchUsersPending,\n    FetchUsersError\n} from './index.model'\n\n\nexport const setSearchField = (text: string): SetSearchField => ({\n    type: ActionTypes.CHANGE_SEARCH_FIELD,\n    text\n})\n\nexport const fetchUsers = (): FetchUsers => ({\n    type: ActionTypes.FETCH_USER,\n})\n\nexport const fetchUserResult = (users: Object): FetchUserResult => ({\n    type: ActionTypes.FETCH_USER_RESULT,\n    users\n})\n\nexport const fetchUsersSuccess = (): FetchUsersSuccess => ({\n    type: ActionTypes.FETCH_USER_SUCCESS,\n})\n\nexport const fetchUsersPending = (): FetchUsersPending => ({\n    type: ActionTypes.FETCH_USER_PENDING,\n})\n\nexport const fetchUsersError = (): FetchUsersError => ({\n    type: ActionTypes.FETCH_USER_ERROR,\n})\n\n\n// export const fetchUsers = async (dispatch:any) => {\n//     dispatch({type: FETCH_USER_START})\n\n//     try {\n//         dispatch({type: FETCH_USER_PENDING})\n//         const user = await fetchRobots();\n//         dispatch({type: FETCH_USER_SUCCESS, payload: user})\n//         console.log('users', user)\n//     } catch(err) {\n//         dispatch({type: FETCH_USER_ERROR})\n//     }\n\n// }\n\n","import React from 'react';\n\ninterface CardProps  {\n  name: string,\n  email: string,\n  id: number\n}\n\nconst Card: React.SFC<CardProps> = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport { Robot } from '../Interfaces'\n\ninterface CardListProps {\n  robots: Array<Robot>\n}\n\nconst CardList = ({ robots }:CardListProps) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\ninterface ISearchBoxProps {\n  searchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\n}\n\nconst SearchBox = ({  searchChange }: ISearchBoxProps) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\ntype Props = {\n  children?: JSX.Element\n}\n\nconst Scroll = (props:Props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../../components/CardList';\nimport SearchBox from '../../components/SearchBox';\nimport Scroll from '../../components/Scroll';\nimport './App.css';\nimport { Robot } from '../../Interfaces';\n\ninterface IAppProps {\n  onFetchUser:() => void,\n  onSearchChange:(val:string) => void,\n  searchfield:string,\n  robots: Robot[],\n  isPending:boolean,\n  error:string\n}\n\ninterface IAppState {\n\n}\n\nclass App extends Component<IAppProps, IAppState> {\n\n  componentDidMount() {\n    this.props.onFetchUser()\n  }\n\n  onSearchChange = (event:any) => {\n    this.props.onSearchChange(event.target.value)\n  }\n\n  render() {\n    const { searchfield, robots } = this.props;\n    const filteredRobots = robots && robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>Find Friends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;","import { connect } from 'react-redux';\nimport { setSearchField, fetchUsers } from '../../Actions/actions';\nimport { Robot } from '../../Interfaces';\nimport App from './App'\nimport { RootState } from '../../Reducers';\n\n\ninterface IStateToProps {\n    searchfield: string,\n    robots : Robot[],\n    isPending : boolean,\n    error : string,\n  }\n\ninterface IDisptchToProps {\n    onSearchChange : (text:string) => void,\n    onFetchUser : () => void,\n  }\n  \n  const mapStateToProps = (state:RootState):IStateToProps => {\n    console.warn('state..', state)\n    return {\n      searchfield: state.searchRobots.searchField,\n      robots : state.requestUsers.robots,\n      isPending : state.requestUsers.isPending,\n      error : state.requestUsers.error,\n    }\n  }\n  \n  const mapDispatchToProps = (dispatch:any):IDisptchToProps  => {\n    return {\n      onSearchChange : (text:string) => dispatch(setSearchField(text)),\n      onFetchUser : () => fetchUsers(),\n    }\n  }\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const fetchRobots = () => {\n    try{\n       return  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n\n    } catch (err) {\n        throw err;\n    }\n}","import { all, call, fork, takeEvery, put } from 'redux-saga/effects'\nimport { ActionTypes } from '../Actions/index.model'\nimport { fetchRobots } from '../Api'\nimport { fetchUserResult, fetchUsersSuccess, fetchUsersPending} from '../Actions/actions'\n\nfunction* fetchUserCall() {\ntry {\n    const users =  yield call(fetchRobots)\n    yield put(fetchUserResult(users))\n    yield put(fetchUsersSuccess())\n} catch(err) {\n    yield put(fetchUsersPending())\n}\n}\n\nfunction* watchFetchUser() {\n    yield takeEvery(ActionTypes.FETCH_USER, fetchUserCall)\n}\n\nexport default function* allWatchers() {\n    yield all([\n      fork(watchFetchUser),\n      \n    ])\n  }","import { all, fork } from 'redux-saga/effects'\nimport userSaga from './fetchUserSaga'\n\n\nexport default function* rootSaga() {\n  yield all([\n    fork(userSaga),\n  ])\n}\n","import createSagaMiddleware from 'redux-saga'\nimport { createLogger } from 'redux-logger'\nconst logger = createLogger();\nexport const sagaMiddleware = createSagaMiddleware()\n\nexport default [sagaMiddleware, logger]","\nimport { Actions, ActionTypes } from '../Actions/index.model';\n\n\nexport interface ISearchRobotsInitState {\n    searchField:string;\n  }\nconst intialStage:ISearchRobotsInitState | {}  = {\n    searchField : '',\n}\n\nexport const searchRobots = (state=intialStage, action:Actions) => {\n    switch(action.type) {\n        case ActionTypes.CHANGE_SEARCH_FIELD:\n           return { ...state, searchField : action.text } \n        default:\n        return state;   \n    }\n}\n","\nimport { Actions, ActionTypes } from '../Actions/index.model';\nimport { Robot } from '../Interfaces';\n\n\n\nexport interface IRequestUserIntiState {\n    robots : Robot[] ,\n    isPending: boolean,\n    error : string,\n  }\n\nconst intialStage: IRequestUserIntiState | {} = {\n    robots : [],\n    isPending: false,\n    error : '',\n}\n\n\n\n\nexport const requestUsers = (state = intialStage , action: Actions ) => {\n    switch (action.type) {\n        case ActionTypes.FETCH_USER_RESULT:\n            return { ...state, robots: action.users, isPending: false }\n        case ActionTypes.FETCH_USER_SUCCESS:\n            return { ...state, isPending: false }\n        case ActionTypes.FETCH_USER_ERROR:\n            return { ...state, isPending: false, error: 'Failed To fetch users' }\n        case ActionTypes.FETCH_USER_PENDING:\n            return { ...state, isPending: true };\n        default:\n            return state;\n    }\n}","import { searchRobots, ISearchRobotsInitState } from './searchRobots';\nimport { requestUsers, IRequestUserIntiState } from './requestUsers'\nimport { combineReducers } from 'redux';\n\nexport interface RootState {\n    searchRobots: ISearchRobotsInitState\n    requestUsers: IRequestUserIntiState\n  }\n\nexport const rootReducer  = {\n    searchRobots:searchRobots,\n    requestUsers:requestUsers,\n}\n\nexport default () => combineReducers(searchRobots)","import { createStore, combineReducers, applyMiddleware } from 'redux'\n// import { composeWithDevTools } from 'redux-devtools-extension'\nimport rootSaga from './sagas/index'\nimport { sagaMiddleware } from './middleware'\n\nimport {rootReducer} from './Reducers'\nimport middleware  from './middleware'\n\n\nexport default (() => {\n    const store = createStore(combineReducers(\n      rootReducer,\n      ),\n     applyMiddleware(...middleware))\n    sagaMiddleware.run(rootSaga)\n    return store\n  })()","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport './index.css';\nimport App from './container/App/index';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport store from './store'\nimport { fetchUsers } from './Actions/actions';\n\nstore.dispatch(fetchUsers())\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}